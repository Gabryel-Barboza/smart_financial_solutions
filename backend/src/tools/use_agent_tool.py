"""Ferramentas para chamar outros agentes"""

from langchain.tools import tool

from src.agents.data_analyst_agent import DataAnalystAgent
from src.agents.data_engineer import DataEngineerAgent
from src.agents.report_gen_agent import ReportGenAgent

_data_analyst = DataAnalystAgent()
_data_engineer = DataEngineerAgent()
_report_gen = ReportGenAgent()


@tool('data_analyst')
async def use_data_analyst(user_request: str) -> dict[str, str]:
    """This tool calls the Data Analyst to work on user's requests. The data and insights generated by the agent are returned. The Data Analyst has the following features:
    (create_bar_chart, create_histogram, create_line_plot, create_scatter_plot, detect_outliers_iqr, find_clusters_and_plot, get_correlation_matrix, get_data_summary, create_box_plot, create_correlation_heatmap, get_data_rows, get_metadata, python_ast_repl)
    These are the functions available for data analysis, the python_ast_repl function is powerful for creating insights not available in other functions.
    """

    response = await _data_analyst.arun(user_request)

    return {'results': response['output']}


@tool('data_engineer')
async def use_data_engineer(user_request: str) -> dict[str, str]:
    """This tool is used to call the Data Engineer to work on user's requests."""
    response = await _data_engineer.arun(user_request)

    return {'results': response['output']}


@tool('report_gen')
async def use_report_gen(report_request: dict[str, str]) -> dict[str, str]:
    """This tool is used to call the Report Generation agent to create and send report files to the user.
    The agent can: create reports as strings, transform the string in document files, and send the file to an email received from the user.
    To use this agent, you need to specify the type of report (analysis_results, validation_audit), the data to create reports about and a user email (if None was provided, ask if the user wants to send to an email or return directly).
    Parameter to receive: {'report_type': 'analysis_results', 'data': '...', 'email': 'user@email.com'}"""

    report_request = dict(report_request)

    agent_input = (
        f'Report type: {report_request.get("report_type")},'
        f'Data and instructions: {report_request.get("data")}'
        f'Email (if available): {report_request.get("email")}'
    )

    response = await _report_gen.arun(agent_input)

    return {'results': response['output']}
